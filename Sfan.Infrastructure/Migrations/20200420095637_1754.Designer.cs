// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Sfan.Infrastructure.EntityFrameworkCore;

namespace Sfan.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200420095637_1754")]
    partial class _1754
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Sfan.Core.Domain.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ModifyCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifyUser")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Sfan.Core.Domain.Documents.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Attachment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Delegater")
                        .HasColumnType("text");

                    b.Property<DateTime>("DeletedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Department")
                        .HasColumnType("integer");

                    b.Property<int>("District")
                        .HasColumnType("integer");

                    b.Property<string>("DocumentCode")
                        .HasColumnType("text");

                    b.Property<string>("DocumentName")
                        .HasColumnType("text");

                    b.Property<int>("DocumentType")
                        .HasColumnType("integer");

                    b.Property<int>("FileType")
                        .HasColumnType("integer");

                    b.Property<string>("Handed")
                        .HasColumnType("text");

                    b.Property<DateTime>("Handover")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ModifyCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifyUser")
                        .HasColumnType("text");

                    b.Property<string>("ProjectArea")
                        .HasColumnType("text");

                    b.Property<string>("ProjectCode")
                        .HasColumnType("text");

                    b.Property<int>("ProjectType")
                        .HasColumnType("integer");

                    b.Property<string>("Recipient")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("Sfan.Core.Domain.Documents.DocumentApply", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Attachment")
                        .HasColumnType("text");

                    b.Property<DateTime>("BackTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ConsultContent")
                        .HasColumnType("text");

                    b.Property<DateTime>("ConsultTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CopyNum")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DocumentType")
                        .HasColumnType("integer");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<bool>("IsCopy")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTake")
                        .HasColumnType("boolean");

                    b.Property<int>("ModifyCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifyUser")
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<int>("SecretLevel")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("DocumentApply");
                });

            modelBuilder.Entity("Sfan.Core.Domain.Identity.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Sfan.Core.Domain.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NickName")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Sfan.Core.Domain.Leaves.Leave", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Attachment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LeaveContent")
                        .HasColumnType("text");

                    b.Property<DateTime>("LeaveTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ModifyCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifyUser")
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Leave");
                });

            modelBuilder.Entity("Sfan.Core.Domain.Project.Audit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AuditState")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ModifyCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifyUser")
                        .HasColumnType("text");

                    b.Property<string>("PersionAudit")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProjectMainId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<Guid?>("ReviewProcessId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProjectMainId");

                    b.HasIndex("ReviewProcessId");

                    b.ToTable("Audit");
                });

            modelBuilder.Entity("Sfan.Core.Domain.Project.CashArrears", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("AmountArrears")
                        .HasColumnType("numeric");

                    b.Property<string>("Area")
                        .HasColumnType("text");

                    b.Property<bool>("BankArrears")
                        .HasColumnType("boolean");

                    b.Property<string>("CustomerAddress")
                        .HasColumnType("text");

                    b.Property<string>("CustomerName")
                        .HasColumnType("text");

                    b.Property<string>("EntrustingParty")
                        .HasColumnType("text");

                    b.Property<string>("Guarantee")
                        .HasColumnType("text");

                    b.Property<string>("GuaranteeAddress")
                        .HasColumnType("text");

                    b.Property<string>("GuaranteeIdCard")
                        .HasColumnType("text");

                    b.Property<string>("GuaranteeIdCardPhotoFront")
                        .HasColumnType("text");

                    b.Property<string>("GuaranteeIdCardPhotoNegative")
                        .HasColumnType("text");

                    b.Property<string>("GuaranteePhone")
                        .HasColumnType("text");

                    b.Property<string>("IdCard")
                        .HasColumnType("text");

                    b.Property<string>("IdCardPhotoFront")
                        .HasColumnType("text");

                    b.Property<string>("IdCardPhotoNegative")
                        .HasColumnType("text");

                    b.Property<int>("ModifyCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifyUser")
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("ProjectName")
                        .HasColumnType("text");

                    b.Property<int>("ProjectType")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RepaymentPlanId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RepaymentPlanId");

                    b.ToTable("CashArrears");
                });

            modelBuilder.Entity("Sfan.Core.Domain.Project.CollateralInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("ActualAssessmentCost")
                        .HasColumnType("numeric");

                    b.Property<string>("BuiltUpArea")
                        .HasColumnType("text");

                    b.Property<string>("Contract")
                        .HasColumnType("text");

                    b.Property<decimal>("EstimatedAssessmentCost")
                        .HasColumnType("numeric");

                    b.Property<decimal>("EstimatedSalesTax")
                        .HasColumnType("numeric");

                    b.Property<string>("Floor")
                        .HasColumnType("text");

                    b.Property<string>("Guarantee")
                        .HasColumnType("text");

                    b.Property<string>("HousePlan")
                        .HasColumnType("text");

                    b.Property<string>("HousingAddress")
                        .HasColumnType("text");

                    b.Property<decimal>("HousingAppraisalAmount")
                        .HasColumnType("numeric");

                    b.Property<string>("HousingAppraisalReport")
                        .HasColumnType("text");

                    b.Property<int>("HousingSituation")
                        .HasColumnType("integer");

                    b.Property<int>("HousingType")
                        .HasColumnType("integer");

                    b.Property<string>("LegalInstrument")
                        .HasColumnType("text");

                    b.Property<int>("ModifyCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifyUser")
                        .HasColumnType("text");

                    b.Property<string>("MortgageHolder")
                        .HasColumnType("text");

                    b.Property<Guid?>("MortgageId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("MortgagePrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("MortgageTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Mortgagor")
                        .HasColumnType("text");

                    b.Property<string>("Orientation")
                        .HasColumnType("text");

                    b.Property<decimal>("OriginalDeedTaxAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("OriginalPurchaseInvoiceAmount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("RealEstateCertificate")
                        .HasColumnType("text");

                    b.Property<int>("RealEstateUse")
                        .HasColumnType("integer");

                    b.Property<string>("TaxCollection")
                        .HasColumnType("text");

                    b.Property<string>("TotalLayerNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MortgageId");

                    b.ToTable("CollateralInformation");
                });

            modelBuilder.Entity("Sfan.Core.Domain.Project.DebtPaying", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("AmountArrears")
                        .HasColumnType("numeric");

                    b.Property<string>("Area")
                        .HasColumnType("text");

                    b.Property<bool>("BankArrears")
                        .HasColumnType("boolean");

                    b.Property<string>("CustomerAddress")
                        .HasColumnType("text");

                    b.Property<string>("CustomerName")
                        .HasColumnType("text");

                    b.Property<string>("EntrustingParty")
                        .HasColumnType("text");

                    b.Property<string>("IdCard")
                        .HasColumnType("text");

                    b.Property<string>("IdCardPhotoFront")
                        .HasColumnType("text");

                    b.Property<string>("IdCardPhotoNegative")
                        .HasColumnType("text");

                    b.Property<int>("ModifyCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifyUser")
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("ProjectName")
                        .HasColumnType("text");

                    b.Property<int>("ProjectType")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RepaymentPlanId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RepaymentPlanId");

                    b.ToTable("DebtPaying");
                });

            modelBuilder.Entity("Sfan.Core.Domain.Project.DebtRepaymentInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("ActualAssessmentCost")
                        .HasColumnType("numeric");

                    b.Property<string>("BuiltUpArea")
                        .HasColumnType("text");

                    b.Property<string>("Contract")
                        .HasColumnType("text");

                    b.Property<Guid?>("DebtPayingId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("EstimatedAssessmentCost")
                        .HasColumnType("numeric");

                    b.Property<decimal>("EstimatedSalesTax")
                        .HasColumnType("numeric");

                    b.Property<string>("Floor")
                        .HasColumnType("text");

                    b.Property<string>("HousePlan")
                        .HasColumnType("text");

                    b.Property<string>("HousingAddress")
                        .HasColumnType("text");

                    b.Property<decimal>("HousingAppraisalAmount")
                        .HasColumnType("numeric");

                    b.Property<string>("HousingAppraisalReport")
                        .HasColumnType("text");

                    b.Property<int>("HousingSituation")
                        .HasColumnType("integer");

                    b.Property<int>("HousingType")
                        .HasColumnType("integer");

                    b.Property<string>("LegalInstrument")
                        .HasColumnType("text");

                    b.Property<int>("ModifyCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifyUser")
                        .HasColumnType("text");

                    b.Property<string>("Orientation")
                        .HasColumnType("text");

                    b.Property<decimal>("OriginalDeedTaxAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("OriginalPurchaseInvoiceAmount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("RealEstateCertificate")
                        .HasColumnType("text");

                    b.Property<int>("RealEstateUse")
                        .HasColumnType("integer");

                    b.Property<decimal>("RepaymentPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("RepaymentTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TaxCollection")
                        .HasColumnType("text");

                    b.Property<string>("TotalLayerNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DebtPayingId");

                    b.ToTable("DebtRepaymentInformation");
                });

            modelBuilder.Entity("Sfan.Core.Domain.Project.Enclosure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CashArrearsId")
                        .HasColumnType("uuid");

                    b.Property<string>("ContractScanning")
                        .HasColumnType("text");

                    b.Property<Guid?>("DebtPayingId")
                        .HasColumnType("uuid");

                    b.Property<string>("LegalInstrument")
                        .HasColumnType("text");

                    b.Property<int>("ModifyCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifyUser")
                        .HasColumnType("text");

                    b.Property<Guid?>("MortgageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CashArrearsId");

                    b.HasIndex("DebtPayingId");

                    b.HasIndex("MortgageId");

                    b.ToTable("Enclosure");
                });

            modelBuilder.Entity("Sfan.Core.Domain.Project.Mortgage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("AmountArrears")
                        .HasColumnType("numeric");

                    b.Property<string>("Area")
                        .HasColumnType("text");

                    b.Property<bool>("BankArrears")
                        .HasColumnType("boolean");

                    b.Property<string>("CustomerAddress")
                        .HasColumnType("text");

                    b.Property<string>("CustomerName")
                        .HasColumnType("text");

                    b.Property<string>("EntrustingParty")
                        .HasColumnType("text");

                    b.Property<string>("IdCard")
                        .HasColumnType("text");

                    b.Property<string>("IdCardPhotoFront")
                        .HasColumnType("text");

                    b.Property<string>("IdCardPhotoNegative")
                        .HasColumnType("text");

                    b.Property<int>("ModifyCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifyUser")
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("ProjectName")
                        .HasColumnType("text");

                    b.Property<int>("ProjectType")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RepaymentPlanId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RepaymentPlanId");

                    b.ToTable("Mortgage");
                });

            modelBuilder.Entity("Sfan.Core.Domain.Project.Receivables", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccountName")
                        .HasColumnType("text");

                    b.Property<Guid?>("CashArrearsId")
                        .HasColumnType("uuid");

                    b.Property<string>("CollectionAccount")
                        .HasColumnType("text");

                    b.Property<Guid?>("DebtPayingId")
                        .HasColumnType("uuid");

                    b.Property<int>("ModifyCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifyUser")
                        .HasColumnType("text");

                    b.Property<Guid?>("MortgageId")
                        .HasColumnType("uuid");

                    b.Property<string>("OpeningBank")
                        .HasColumnType("text");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CashArrearsId");

                    b.HasIndex("DebtPayingId");

                    b.HasIndex("MortgageId");

                    b.ToTable("Receivables");
                });

            modelBuilder.Entity("Sfan.Core.Domain.Project.RepaymentPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccountName")
                        .HasColumnType("text");

                    b.Property<decimal>("AmountArrears")
                        .HasColumnType("numeric");

                    b.Property<decimal>("InterestPerPeriod")
                        .HasColumnType("numeric");

                    b.Property<decimal>("InterestRate")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("LoanPeriod")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ModifyCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifyUser")
                        .HasColumnType("text");

                    b.Property<string>("OpeningBank")
                        .HasColumnType("text");

                    b.Property<string>("RepaymentAccount")
                        .HasColumnType("text");

                    b.Property<int>("RepaymentPeriod")
                        .HasColumnType("integer");

                    b.Property<int>("RepaymentType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("RepaymentPlan");
                });

            modelBuilder.Entity("Sfan.Core.Domain.Project.ReviewProcess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AuditType")
                        .HasColumnType("integer");

                    b.Property<int>("ModifyCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifyUser")
                        .HasColumnType("text");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("ReviewProcess");
                });

            modelBuilder.Entity("Sfan.Core.Domain.ProjectMain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ModifyCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifyUser")
                        .HasColumnType("text");

                    b.Property<string>("PersonInCharge")
                        .HasColumnType("text");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<int>("ProjectState")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ProjectMain");
                });

            modelBuilder.Entity("Sfan.Core.Domain.Reimbursements.Reimbursement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ModifyCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifyUser")
                        .HasColumnType("text");

                    b.Property<decimal>("Money")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("ProduceTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ProjectName")
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Voucher")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Reimbursement");
                });

            modelBuilder.Entity("Sfan.Core.Domain.Seals.Seal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ModifyCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifyUser")
                        .HasColumnType("text");

                    b.Property<string>("SealName")
                        .HasColumnType("text");

                    b.Property<string>("SealPurpose")
                        .HasColumnType("text");

                    b.Property<int>("SealState")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Seal");
                });

            modelBuilder.Entity("Sfan.Core.Domain.Seals.SealApply", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Attachment")
                        .HasColumnType("text");

                    b.Property<DateTime>("BackTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CompanyName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ModifyCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifyUser")
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("SealExplain")
                        .HasColumnType("text");

                    b.Property<int>("SealType")
                        .HasColumnType("integer");

                    b.Property<bool>("TakeOut")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("SealApply");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Sfan.Core.Domain.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Sfan.Core.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Sfan.Core.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Sfan.Core.Domain.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sfan.Core.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Sfan.Core.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sfan.Core.Domain.Project.Audit", b =>
                {
                    b.HasOne("Sfan.Core.Domain.ProjectMain", null)
                        .WithMany("Audits")
                        .HasForeignKey("ProjectMainId");

                    b.HasOne("Sfan.Core.Domain.Project.ReviewProcess", null)
                        .WithMany("Audits")
                        .HasForeignKey("ReviewProcessId");
                });

            modelBuilder.Entity("Sfan.Core.Domain.Project.CashArrears", b =>
                {
                    b.HasOne("Sfan.Core.Domain.Project.RepaymentPlan", "RepaymentPlan")
                        .WithMany()
                        .HasForeignKey("RepaymentPlanId");
                });

            modelBuilder.Entity("Sfan.Core.Domain.Project.CollateralInformation", b =>
                {
                    b.HasOne("Sfan.Core.Domain.Project.Mortgage", null)
                        .WithMany("CollateralInformations")
                        .HasForeignKey("MortgageId");
                });

            modelBuilder.Entity("Sfan.Core.Domain.Project.DebtPaying", b =>
                {
                    b.HasOne("Sfan.Core.Domain.Project.RepaymentPlan", "RepaymentPlan")
                        .WithMany()
                        .HasForeignKey("RepaymentPlanId");
                });

            modelBuilder.Entity("Sfan.Core.Domain.Project.DebtRepaymentInformation", b =>
                {
                    b.HasOne("Sfan.Core.Domain.Project.DebtPaying", null)
                        .WithMany("DebtRepaymentInformation")
                        .HasForeignKey("DebtPayingId");
                });

            modelBuilder.Entity("Sfan.Core.Domain.Project.Enclosure", b =>
                {
                    b.HasOne("Sfan.Core.Domain.Project.CashArrears", null)
                        .WithMany("Enclosures")
                        .HasForeignKey("CashArrearsId");

                    b.HasOne("Sfan.Core.Domain.Project.DebtPaying", null)
                        .WithMany("Enclosures")
                        .HasForeignKey("DebtPayingId");

                    b.HasOne("Sfan.Core.Domain.Project.Mortgage", null)
                        .WithMany("Enclosures")
                        .HasForeignKey("MortgageId");
                });

            modelBuilder.Entity("Sfan.Core.Domain.Project.Mortgage", b =>
                {
                    b.HasOne("Sfan.Core.Domain.Project.RepaymentPlan", "RepaymentPlan")
                        .WithMany()
                        .HasForeignKey("RepaymentPlanId");
                });

            modelBuilder.Entity("Sfan.Core.Domain.Project.Receivables", b =>
                {
                    b.HasOne("Sfan.Core.Domain.Project.CashArrears", null)
                        .WithMany("ReceivablesList")
                        .HasForeignKey("CashArrearsId");

                    b.HasOne("Sfan.Core.Domain.Project.DebtPaying", null)
                        .WithMany("ReceivablesList")
                        .HasForeignKey("DebtPayingId");

                    b.HasOne("Sfan.Core.Domain.Project.Mortgage", null)
                        .WithMany("ReceivablesList")
                        .HasForeignKey("MortgageId");
                });
#pragma warning restore 612, 618
        }
    }
}
